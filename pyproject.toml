[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nautobot-chatbot"
version = "1.0.0"
description = "A Nautobot app that provides an overlay chatbot interface"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Ben Bot", email = "benbot@example.com"},
]
keywords = ["nautobot", "chatbot", "assistant", "plugin"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "nautobot>=1.5.0",
    "django>=3.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-django>=4.5.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "isort>=5.12.0",
    "pylint>=2.15.0",
    "pylint-django>=2.5.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
ai = [
    "sentence-transformers>=2.2.0",
    "numpy>=1.21.0",
    "scikit-learn>=1.0.0",
    "requests>=2.28.0",
]

[project.urls]
Homepage = "https://github.com/example/nautobot-chatbot"
Repository = "https://github.com/example/nautobot-chatbot"
Documentation = "https://github.com/example/nautobot-chatbot#readme"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["nautobot_chatbot*"]

[tool.setuptools.package-data]
"nautobot_chatbot" = [
    "templates/**/*.html",
    "static/**/*.css",
    "static/**/*.js",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["nautobot_chatbot"]
known_third_party = ["django", "nautobot", "requests", "numpy", "sklearn", "sentence_transformers"]
skip_glob = ["*/migrations/*", "*/venv/*", "*/.venv/*"]
filter_files = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
strict_optional = true
warn_no_return = true
warn_return_any = false
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "nautobot_chatbot.migrations.*",
    "tests.*",
]
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "nautobot.core.settings"
python_files = ["test_*.py", "*_test.py", "*_tests.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--reuse-db",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["nautobot_chatbot"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_paramiko

# Ruff configuration (alternative to flake8)
[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "PL",  # pylint
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "B904",   # `raise` without `from` inside `except`
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value comparison
]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    "migrations",
    "venv",
    ".venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["PLR2004"]   # Allow magic values in tests
"migrations/*" = ["E501", "F401", "F403", "F405"]  # Django migration exceptions

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["nautobot_chatbot"]
known-third-party = ["django", "nautobot"]